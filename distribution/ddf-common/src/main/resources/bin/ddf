#!/bin/sh

# Store arguments for use in local functions
FIRST_ARGUMENT=$1
ALL_ARGUMENTS=$@

# Useful directories
SCRIPTDIR=$(dirname $0)
HOME_DIR=$(cd "${SCRIPTDIR}/.."; pwd -P)

# Declare Karaf executable's return code
KARAF_EXEC_RC=-1

# Useful files
PROPERTIES_FILE=$HOME_DIR/etc/system.properties
RESTART_FILE="$SCRIPTDIR/restart.jvm"
SOLR_EXEC=${HOME_DIR}/solr/bin/solr

# Extract the value of a property from a Java properties file
# This function does not handle multi-line properties
get_property() {
    grep ^$1= "$PROPERTIES_FILE" | cut -d '=' -f2
}


# Extract values from Java properties file and construct Solr URL
MANAGE_SOLR=$(get_property solr.managed.internally)
SOLR_PORT=$(get_property solr.http.port)
TEMPLATE=$(get_property solr.http.url)
PARTIAL_URL="$(echo $TEMPLATE | sed -e 's/\${solr.http.port}/PORT_PLACEHOLDER/')"
SOLR_URL=${PARTIAL_URL/"PORT_PLACEHOLDER"/$SOLR_PORT}

# Return 0 (success/true) if the Solr lifecycle should be managed by this script
is_managing_solr() {
  grep -i true <<< $MANAGE_SOLR > /dev/null
}

# Return 0 (success/true) if the input parameter is "http" (in any case)
is_protocol_https() {
    grep -i ^HTTPS <<< $1 > /dev/null
}

# Return 0 (success/true) if ddf_on_error.sh created a restart file
is_restarting() {
    local RC=1
    if [ -f $RESTART_FILE ]; then
        RC=0
    fi
    return $RC
}

# Return 0 (sucess/true) if Solr is up and running
is_solr_running() {

    # Ping the catalog core and look for the string "OK"
    # If grep find the string "OK",  command exits with return code 0 (success)
    # If "OK" is not found, command exists with non-zero return code
    # FYI: curl prints output to stderr, so direct stderr to stdout before grepping
    # FYI: Suppress printing to the terminal by redirecting output to dev/null
    local TIMEOUT=3 #seconds
    curl -k --silent --connect-timeout $TIMEOUT "$SOLR_URL"/catalog/admin/ping 2>&1 | grep OK > /dev/null
}

# Remove the restart file so we can detect later if restart was requested
clear_restart_flag() {
  rm -f $RESTART_FILE
}

# Blindly start Solr. Before calling this function, check if Solr is already running.
start_solr() {
        $SOLR_EXEC restart -p $SOLR_PORT
        local SOLR_START_RC=$?
        if [ "$SOLR_START_RC" -ne 0 ]; then
            echo "WARNING! solr start process returned non-zero error code, please check Solr logs"
        fi
}

# Set special environment variables used by Solr to configure TLS
set_solr_https_properties() {
      export SOLR_SSL_KEY_STORE=$HOME_DIR/$(get_property javax.net.ssl.keyStore)
      export SOLR_SSL_KEY_STORE_PASSWORD=$(get_property javax.net.ssl.keyStorePassword)
      export SOLR_SSL_KEY_STORE_TYPE=$(get_property javax.net.ssl.keyStoreType)
      export SOLR_SSL_TRUST_STORE=$HOME_DIR/$(get_property javax.net.ssl.trustStore)
      export SOLR_SSL_TRUST_STORE_PASSWORD=$(get_property javax.net.ssl.trustStorePassword)
      export SOLR_SSL_TRUST_STORE_TYPE=$(get_property javax.net.ssl.trustStoreType)
      export SOLR_SSL_NEED_CLIENT_AUTH=true
      export SOLR_SSL_WANT_CLIENT_AUTH=false
}

stop_solr() {
    $SOLR_EXEC stop -p $SOLR_PORT
}

print_messages() {
    echo "Home direcotry is $HOME_DIR"
    echo "Solr URL is $SOLR_URL"
    local VALUE
    if is_managing_solr; then
      VALUE="is"
    else
      VALUE="is NOT"
    fi
    echo "The application $VALUE managing the starting and stopping of Solr"
}


start_karaf() {
    # Arguments to Karaf are optional
    ${SCRIPTDIR}/karaf ${ALL_ARGUMENTS}
}

attempt_startup() {

    if is_managing_solr; then
        if is_solr_running; then
            echo "Solr is already running. Skipping Solr start."
        else
            if is_protocol_https $SOLR_URL; then
                set_solr_https_properties
            fi
            start_solr;
        fi
    else
        echo "Solr is not managed"
    fi

    # Process suspended while Karaf is running
    start_karaf
    KARAF_EXEC_RC=$?
}

attempt_shutdown() {

    if is_restarting; then
        echo "Restarting JVM..."
    else
        if is_managing_solr; then
            stop_solr
        fi
        exit $KARAF_EXEC_RC
    fi
}

while true; do
    clear_restart_flag
    print_messages
    attempt_startup
    attempt_shutdown
done
